# create_equipment_templates.py
import pandas as pd
import os


def create_pipeline_template():
    """Создает шаблон Excel для трубопроводов"""
    data = {
        'Наименование': [
            'Трубопровод подачи сырья (Цех №1)',
            'Трубопровод теплоносителя (Теплопункт)',
            'Трубопровод охлаждения (Установка А)'
        ],
        'Проект_код': ['PRJ-001-2024', 'PRJ-001-2024', 'PRJ-001-2024'],
        'Вещество': ['Бензин АИ-92', 'Пропан', 'Метан'],
        'Компонент_предприятия': ['Цех №1', 'Теплопункт', 'Установка А'],
        'Идентификатор_подсистемы': ['PIPE-001', 'PIPE-002', 'PIPE-003'],
        'Категория_диаметра': ['От 75 до 150 мм', 'Более 150 мм', 'Менее 75 мм'],
        'Длина_м': [120.0, 250.0, 80.0],
        'Диаметр_мм': [100.0, 200.0, 50.0],
        'Давление_МПа': [1.2, 0.8, 1.5],
        'Температура_C': [25.0, 80.0, 15.0],
        'Расход_кгс': [15.5, 25.0, 8.0],
        'Время_выброса_с': [60.0, 90.0, 45.0],
        'Доля_аварийного_участка': [1.0, 0.8, 0.5],
        'Ожидаемые_пострадавшие': [2, 1, 0]
    }

    # Создаем DataFrame
    df = pd.DataFrame(data)

    # Сохраняем в Excel
    filename = 'Шаблон_Трубопроводы.xlsx'
    df.to_excel(filename, index=False)
    print(f"Шаблон для трубопроводов создан: {filename}")
    return filename


def create_pump_template():
    """Создает шаблон Excel для насосов"""
    data = {
        'Наименование': [
            'Насос подачи сырья (Цех №1)',
            'Насос системы охлаждения (Установка А)',
            'Насос циркуляционный (Блок Б)'
        ],
        'Проект_код': ['PRJ-001-2024', 'PRJ-001-2024', 'PRJ-001-2024'],
        'Вещество': ['Бензин АИ-92', 'Пропан', 'Метан'],
        'Компонент_предприятия': ['Цех №1', 'Установка А', 'Блок Б'],
        'Идентификатор_подсистемы': ['PUMP-001', 'PUMP-002', 'PUMP-003'],
        'Тип_насоса': ['Центробежные герметичные', 'Центробежные с уплотнениями', 'Поршневые'],
        'Объем_м3': [0.5, 1.2, 0.8],
        'Давление_МПа': [1.5, 2.5, 3.0],
        'Температура_C': [25.0, 45.0, 30.0],
        'Расход_кгс': [15.0, 25.0, 20.0],
        'Время_выброса_с': [30.0, 60.0, 45.0],
        'Ожидаемые_пострадавшие': [1, 2, 0]
    }

    # Создаем DataFrame
    df = pd.DataFrame(data)

    # Сохраняем в Excel
    filename = 'Шаблон_Насосы.xlsx'
    df.to_excel(filename, index=False)
    print(f"Шаблон для насосов создан: {filename}")
    return filename


def create_tech_device_template():
    """Создает шаблон Excel для технологических устройств"""
    data = {
        'Наименование': [
            'Теплообменник основной (Цех №1)',
            'Реактор синтеза (Установка Б)',
            'Сепаратор газа (Компрессорный блок)'
        ],
        'Проект_код': ['PRJ-001-2024', 'PRJ-001-2024', 'PRJ-001-2024'],
        'Вещество': ['Метан', 'Пропан', 'Бензин АИ-92'],
        'Компонент_предприятия': ['Цех №1', 'Установка Б', 'Компрессорный блок'],
        'Идентификатор_подсистемы': ['TD-001', 'TD-002', 'TD-003'],
        'Тип_устройства': ['Технологические аппараты', 'Химические реакторы', 'Сосуды хранения под давлением'],
        'Объем_м3': [5.0, 12.0, 8.0],
        'Давление_МПа': [1.2, 2.5, 1.8],
        'Температура_C': [80.0, 250.0, 45.0],
        'Степень_заполнения': [0.8, 0.6, 0.75],
        'Площадь_пролива_м2': [25.0, 40.0, 30.0],
        'Ожидаемые_пострадавшие': [1, 3, 2]
    }

    # Создаем DataFrame
    df = pd.DataFrame(data)

    # Сохраняем в Excel
    filename = 'Шаблон_Технологические_устройства.xlsx'
    df.to_excel(filename, index=False)
    print(f"Шаблон для технологических устройств создан: {filename}")
    return filename


def create_tank_template():
    """Создает шаблон Excel для резервуаров"""
    data = {
        'Наименование': [
            'Резервуар нефтепродуктов РВС-1000 (Резервуарный парк)',
            'Резервуар сжиженного газа (Газовое хозяйство)',
            'Емкость для химпродуктов (Химический блок)'
        ],
        'Проект_код': ['PRJ-001-2024', 'PRJ-001-2024', 'PRJ-001-2024'],
        'Вещество': ['Бензин АИ-92', 'Пропан', 'Метанол'],
        'Компонент_предприятия': ['Резервуарный парк', 'Газовое хозяйство', 'Химический блок'],
        'Идентификатор_подсистемы': ['TANK-001', 'TANK-002', 'TANK-003'],
        'Тип_резервуара': ['Одностенный', 'Полной герметизации', 'С двойной оболочкой'],
        'Объем_м3': [1000.0, 500.0, 200.0],
        'Давление_МПа': [0.1, 1.6, 0.2],
        'Температура_C': [25.0, -10.0, 20.0],
        'Степень_заполнения': [0.85, 0.8, 0.9],
        'Площадь_пролива_м2': [400.0, 250.0, 150.0],
        'Ожидаемые_пострадавшие': [3, 2, 1]
    }

    # Создаем DataFrame
    df = pd.DataFrame(data)

    # Сохраняем в Excel
    filename = 'Шаблон_Резервуары.xlsx'
    df.to_excel(filename, index=False)
    print(f"Шаблон для резервуаров создан: {filename}")
    return filename


def create_truck_tank_template():
    """Создает шаблон Excel для автоцистерн"""
    data = {
        'Наименование': [
            'Автоцистерна бензиновоза (Автотранспортный цех)',
            'Автоцистерна СУГ (Газовый парк)',
            'Автоцистерна для химпродуктов (Склад ГСМ)'
        ],
        'Проект_код': ['PRJ-001-2024', 'PRJ-001-2024', 'PRJ-001-2024'],
        'Вещество': ['Бензин АИ-92', 'Пропан', 'Метанол'],
        'Компонент_предприятия': ['Автотранспортный цех', 'Газовый парк', 'Склад ГСМ'],
        'Идентификатор_подсистемы': ['TT-001', 'TT-002', 'TT-003'],
        'Тип_давления': ['При атмосферном давлении', 'Под избыточным давлением', 'При атмосферном давлении'],
        'Объем_м3': [30.0, 16.0, 20.0],
        'Давление_МПа': [0.1, 1.6, 0.1],
        'Температура_C': [25.0, -5.0, 20.0],
        'Степень_заполнения': [0.9, 0.85, 0.9],
        'Площадь_пролива_м2': [120.0, 80.0, 100.0],
        'Ожидаемые_пострадавшие': [1, 2, 1]
    }

    # Создаем DataFrame
    df = pd.DataFrame(data)

    # Сохраняем в Excel
    filename = 'Шаблон_Автоцистерны.xlsx'
    df.to_excel(filename, index=False)
    print(f"Шаблон для автоцистерн создан: {filename}")
    return filename


def create_compressor_template():
    """Создает шаблон Excel для компрессоров"""
    data = {
        'Наименование': [
            'Компрессор газовый К-101 (Компрессорный цех)',
            'Турбокомпрессор ТК-201 (Цех синтеза)',
            'Компрессор холодильной установки (Блок охлаждения)'
        ],
        'Проект_код': ['PRJ-001-2024', 'PRJ-001-2024', 'PRJ-001-2024'],
        'Вещество': ['Метан', 'Пропан', 'Аммиак'],
        'Компонент_предприятия': ['Компрессорный цех', 'Цех синтеза', 'Блок охлаждения'],
        'Идентификатор_подсистемы': ['COMP-001', 'COMP-002', 'COMP-003'],
        'Тип_компрессора': ['Центробежный компрессор', 'Поршневой компрессор', 'Винтовой компрессор'],
        'Объем_м3': [2.5, 4.0, 1.8],
        'Давление_МПа': [3.5, 4.2, 2.8],
        'Температура_C': [50.0, 80.0, 35.0],
        'Расход_кгс': [8000.0, 12000.0, 5000.0],
        'Время_выброса_с': [60.0, 90.0, 45.0],
        'Ожидаемые_пострадавшие': [2, 3, 1]
    }

    # Создаем DataFrame
    df = pd.DataFrame(data)

    # Сохраняем в Excel
    filename = 'Шаблон_Компрессоры.xlsx'
    df.to_excel(filename, index=False)
    print(f"Шаблон для компрессоров создан: {filename}")
    return filename


def create_all_templates():
    """Создает шаблоны для всех типов оборудования"""
    # Создаем папку для шаблонов, если она не существует
    output_dir = "Excel_Templates"
    if not os.path.exists(output_dir):
        os.makedirs(output_dir)
        print(f"Создана папка для шаблонов: {output_dir}")

    # Текущий каталог
    current_dir = os.getcwd()

    # Переходим в папку для шаблонов
    os.chdir(output_dir)

    # Создаем шаблоны
    templates = []
    templates.append(create_pipeline_template())
    templates.append(create_pump_template())
    templates.append(create_tech_device_template())
    templates.append(create_tank_template())
    templates.append(create_truck_tank_template())
    templates.append(create_compressor_template())

    # Возвращаемся в исходный каталог
    os.chdir(current_dir)

    print(f"\nВсе шаблоны созданы в папке: {output_dir}")
    print(f"Созданные шаблоны: {', '.join(templates)}")


if __name__ == "__main__":
    create_all_templates()